# -*- coding: utf-8 -*-
"""Untitled145.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VU1pJVD5qE850LF1Sm1Hspu_CV9EdKIm
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import google.generativeai as genai
from google.cloud import vision
import io
import os

# Load Google Vision API credentials
CREDENTIALS = ""C:\Users\lenovo\Downloads\automatic-bill-analyser-72c84106d14b.json""
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = CREDENTIALS

# Initialize Gemini model
genai.configure(api_key="AIzaSyAqxTFd6eXeUU-627CDl9dUXyB-MLQk3yU")  # Replace with your Gemini API key
model = genai.GenerativeModel("gemini-1.5-flash")

# Function to extract text from an image using Google Vision API
def extract_text_from_image(image_data):
    client = vision.ImageAnnotatorClient()
    image = vision.Image(content=image_data)
    response = client.text_detection(image=image)

    if response.error.message:
        return f"Error: {response.error.message}"

    extracted_text = response.text_annotations[0].description if response.text_annotations else ""
    return extracted_text

# Function to process text with Gemini AI
def process_bill_data(text):
    system_prompt = """You are an automatic bill analyser. Extract the total amount,
    hotel name, date, and time from the provided bill text. Format it as a table
    sorted by date and calculate total expenses."""

    response = model.generate_content([system_prompt, text])
    return response.text if response else "Error in processing"

# Streamlit UI
st.title("ðŸ“„ Automatic Bill Analyser")

uploaded_files = st.file_uploader("Upload Multiple Bills (Images)", type=["png", "jpg", "jpeg"], accept_multiple_files=True)

if uploaded_files:
    extracted_data = []

    for uploaded_file in uploaded_files:
        image_bytes = uploaded_file.read()
        extracted_text = extract_text_from_image(image_bytes)
        processed_text = process_bill_data(extracted_text)

        extracted_data.append({"Bill": uploaded_file.name, "Extracted Data": processed_text})

    # Convert data to DataFrame
    df = pd.DataFrame(extracted_data)

    st.subheader("Extracted Bill Data")
    st.write(df)

    # Expense Analysis (Mock Example)
    expense_data = {"Date": ["2024-03-01", "2024-03-02", "2024-03-03"], "Amount": [1500, 1200, 1800]}
    expense_df = pd.DataFrame(expense_data)

    # Plot Expenses
    st.subheader("ðŸ“Š Expense Analysis")
    fig, ax = plt.subplots()
    ax.plot(expense_df["Date"], expense_df["Amount"], marker="o", linestyle="-")
    ax.set_xlabel("Date")
    ax.set_ylabel("Amount Spent")
    ax.set_title("Daily Expenditure")
    st.pyplot(fig)