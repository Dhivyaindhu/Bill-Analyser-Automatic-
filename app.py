# -*- coding: utf-8 -*-
"""Untitled145.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VU1pJVD5qE850LF1Sm1Hspu_CV9EdKIm
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import io
import os
import json
from PIL import Image
from concurrent.futures import ThreadPoolExecutor
import google.generativeai as genai
from google.cloud import vision

# Configure Gemini AI
genai.configure(api_key="AIzaSyAqxTFd6eXeUU-627CDl9dUXyB-MLQk3yU")

# Google Cloud Vision client
vision_client = vision.ImageAnnotatorClient()

# System prompt for Gemini AI
SYSTEM_PROMPT = """You are the automatic bill analyser.
Extract the total amount, hotel name, date, and time from the photocopies of bills.
Arrange the extracted information in a table format sorted by date.
Compute the total sum and provide an expenditure vs salary analysis using a graph.
"""

# Function to resize images for faster processing
def resize_image(image_file, max_size=(800, 800)):
    """Resizes the uploaded image to optimize processing speed."""
    image = Image.open(image_file)
    image.thumbnail(max_size)

    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format="JPEG")
    return img_byte_arr.getvalue()

# Function to extract text from multiple images using Google Vision OCR (Batch Processing)
@st.cache_resource
def extract_text_from_images(images):
    """Extracts text from multiple bills using Google Vision OCR in batch mode."""
    requests = []
    for image_file in images:
        content = resize_image(image_file)
        image = vision.Image(content=content)
        requests.append(vision.AnnotateImageRequest(
            image=image, features=[vision.Feature(type_=vision.Feature.Type.TEXT_DETECTION)]
        ))

    # Perform batch annotation
    response = vision_client.batch_annotate_images(requests=requests)

    texts = []
    for res in response.responses:
        text = res.text_annotations[0].description if res.text_annotations else "No text detected."
        texts.append(text)

    return texts

# Function to analyze invoice text using Gemini AI
@st.cache_resource
def analyze_invoice(text):
    """Extracts structured information (hotel, date, time, total amount) from bill text using Gemini AI."""
    prompt = f"Extract the following from this bill: Hotel Name, Date, Time, Total Amount. " \
             f"Provide output in JSON format: {{'hotel': '', 'date': '', 'time': '', 'amount': ''}}. \n\n{text}"

    response = genai.generate_content(prompt)
    try:
        extracted_data = json.loads(response.text)
    except json.JSONDecodeError:
        extracted_data = {"hotel": "Unknown", "date": "Unknown", "time": "Unknown", "amount": "0"}

    return extracted_data

# Streamlit UI
st.title("üìë Automatic Bill Analyzer")
st.sidebar.header("Upload Your Bills")

# File uploader for multiple images
uploaded_files = st.sidebar.file_uploader(
    "Upload bill images (JPG, PNG)", type=["jpg", "png"], accept_multiple_files=True
)

if uploaded_files:
    st.sidebar.success(f"{len(uploaded_files)} bills uploaded successfully! üöÄ")

    # Extract text from all images
    with st.spinner("üîç Extracting text from bills... Please wait"):
        texts = extract_text_from_images(uploaded_files)

    # Process texts using Gemini AI in parallel
    with st.spinner("ü§ñ Analyzing bills using AI..."):
        with ThreadPoolExecutor() as executor:
            extracted_data_list = list(executor.map(analyze_invoice, texts))

    # Convert extracted data into a DataFrame
    df = pd.DataFrame(extracted_data_list)
    df["amount"] = df["amount"].astype(float)  # Convert amount to numeric
    df = df.sort_values(by="date")  # Sort by date

    # Display extracted data
    st.subheader("üìã Extracted Bill Information")
    st.dataframe(df)

    # Total expenditure
    total_spent = df["amount"].sum()
    st.subheader(f"üí∞ Total Expenditure: ‚Çπ{total_spent:.2f}")

    # Salary input for analysis
    salary = st.number_input("Enter Your Monthly Salary (‚Çπ):", min_value=1000, value=50000, step=500)

    # Expenditure vs Salary Graph
    fig, ax = plt.subplots()
    labels = ["Spent", "Remaining"]
    values = [total_spent, salary - total_spent]
    ax.pie(values, labels=labels, autopct="%1.1f%%", colors=["#ff9999", "#66b3ff"])
    ax.set_title("üìä Expenditure vs Salary")
    st.pyplot(fig)

    # Download CSV option
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("üì• Download CSV Report", csv, "bills_analysis.csv", "text/csv")

else:
    st.warning("üì§ Please upload at least one bill to analyze.")